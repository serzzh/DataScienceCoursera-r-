pois.test
poisson.test
poisson.test(10, 1787, .001)
poisson.test(10, 1787, .01, alternative='one.sided')
poisson.test(10, 1787, .01, alternative='less')
poisson.test(10, 1787, .01, alternative='greater')
poisson.test(10, 1787, .01, alternative='less')
power.t.test(n=9, delta=4, sd=sqrt(1.5^2+1.8^2)/2))
power.t.test(n=9, delta=4, sd=sqrt(1.5^2+1.8^2)/2)
power.t.test(n=9, delta=4, sd=sqrt(1.5^2+1.8^2))/2
power.t.test(n=9, delta=4, sd=sqrt(1.5^2+1.8^2))/3
power.t.test(n=9, delta=4, sd=sqrt(1.5^2+1.8^2)/3
)
power.t.test(n=9, delta=4, sd=sqrt(1.5^2+1.8^2)/3)
power.t.test(n=9, delta=4, sd=1.8)
power.t.test(n=9, delta=4, sd=.6)
power.t.test(n=9, delta=4, sd=.6, alternative='two.sided')
power.t.test(n=9, delta=4, sd=1.5, alternative='two.sided')
power.t.test(n=9, delta=4, sd=sqrt((1.5^2+1.8^2)/2)
)
power.t.test(n=9, delta=4, sd=sqrt((1.5^2+1.8^2)/2))
t.test((1077+1123)/2-1078, alternative='two.sided', conf.level=.9)
power.t.test(delta=(1077+1123)/2-1078, n=9, alternative='two.sided', conf.level=.9)
power.t.test(delta=.01, n=100, sd=.04)
power.t.test(delta=.01, n=100, sd=.04, alternative='one.sided')
power.t.test(delta=.01, n=100, sd=.04, alternative='one.sided', type='one.sample')
power.t.test(delta=.01, n=120, sd=.04, alternative='one.sided', type='one.sample')
power.t.test(delta=.01, n=140, sd=.04, alternative='one.sided', type='one.sample')
power.t.test(delta=.01, power=.9, sd=.04, alternative='one.sided', type='one.sample')
1100 +c(-1,1)*qt(0.975,8)*30/3
(.75*.3)/(.75*.3+.48*.7)
75*1.645
?pnorm
qnorm(.95, 1100, 75)
qnorm(.95, mean=1100, sd=75)
1100+c(-1,1)*qt(.975,99)*75/10
1100+c(-1,1)*qt(.95,99)*75/10
.16*.16*.16*.16
.16^4*.84
.16^4*.84+.16^5
(.16^4*.84+.16^5)*100
(.16^4*.84*4+.16^5)*100
(.16^4*.84*5+.16^5)*100
(.5^4*.5*5+.5^5)*100
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
?lm
lm<-lm(x~y)
lm
coef(lm)
coef(lm)[1]
test
test.t
t.test
t.test(lm)
coef(lm)
?lm
lm(y~x)
t.test(coef(lm)[1])
b<-y/x
b
t.test(b)
(y-mean(y))/(x-mean(x))
t.test((y-mean(y))/(x-mean(x)))
x
y
lm(y~x)
plot(Y~x)
plot(y~x)
t.test(y)
t.test(y-mean(y))
coef<-(y-mean(y))/(x-mean(x))
coef
t.test(coef)
lm
lm<-lm(y~x)
lm
coef(lm)[1]
coef(lm)[2]
k<-coef(lm)[2]
k
res<-y-kx
res<-y-kx
res<-y-k*x
res
sd(res)
mean(res)
res2<-y-coef(lm(x~y))[2]*x
res2
mean(res2)
sd(res2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm)
mtcars
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
lm<-lm(y~x)
summary(lm)
lm<-lm(x~y)
summary(lm)
lm<-lm(y~x)
summary(lm)
t.test(y-mean(y))
t.test(y)
power.t.test(y)
power.t.test(n=9, delta=y-mean(y), sd=sd(y))
sd(y-coef(lm)[1]-coef(lm)[2]*x)
t.testy-coef(lm)[1]-coef(lm)[2]*x()
t.test(y-coef(lm)[1]-coef(lm)[2]*x()
)
t.test(y-coef(lm)[1]-coef(lm)[2]*x)
sd(y-coef(lm)[1]-coef(lm)[2]*x)
mtcars
lm<-lm(mpg~weigth, data=mtcars)
lm<-lm(mpg~wt, data=mtcars)
summary(lm)
predict(lm)
?predict
predict(lm,mean(wt))
predict(lm,mean(mtcars$wt))
wt
mtcars$wt
mean(mtcars$wt)
mn<-mean(mtcars$wt)
mn
predict(lm,mn)
predict(lm)
predict(lm,3)
predict(lm,3, interval = ("confidence"))
predict(lm)
predict(lm, 3, interval = ("confidence"))
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
fit
predict(fit, 3, interval = ("confidence"))
lm<-lm(mtcars$mpg~mtcars$wt)
lm
new<data.frame(x=c(mean(x))
)
new<data.frame(x=c(mean(mtcars$wt))
)
new<data.frame(c(mean(mtcars$wt))
new<data.frame(c(mean(mtcars$wt))
new<-data.frame(c(mean(mtcars$wt))
)
new
new<-data.frame(x=c(mean(mtcars$wt)))
new
predict(fit, 3new, interval = ("confidence"))
predict(fit, new, interval = ("confidence"))
?mtcars
mtcars
fit
new<-data.frame(x=3)
predict(fit, new, interval = ("confidence"))
predict(fit, new, interval = ("prediction"))
sh<-mtcars$wt/2
sh
lm<-(mtcars$mpg,sh)
lm<-(mtcars$mpg~sh)
lm
lm<-lm(mtcars$mpg~sh)
lm
coef(lm)
summary(lm)
coef(lm)
coef(lm)[1]
coef(lm)[1,1]
coef(lm)[2,1]
coef(lm)[2]
summary(lm)
k<-summary(lm)$coefficients
k
k[1,2]
k[2,1]
k[2,1]+c(-1,1)*k[2,2]*qt(.975,length(sh))
k[2,1]+c(-1,1)*k[2,2]*qt(.95,length(sh))
k[2,1]+c(-1,1)*k[2,2]*qt(.985,length(sh))
k[2,1]+c(-1,1)*k[2,2]*qt(.975,length(sh))
k[2,1]+c(-1,1)*k[2,2]*qt(.975,length(sh)-1)
lm<-lm(mtcars$mpg~mtcars$wt)
residual(lm)
residuals(lm)
sum(residuals(lm)^2)
sum((y-mean(y))^2)
278/1126
summary(mtcars)
lm<-lm(mpg~cyl, data=mtcars)
lm
summary lm
summary(lm)
lm_4<-lm(mpg~wt, data=mtcars, cyl=4)
lm_4<-lm(mpg~wt, data=mtcars, mtcars$cyl=4)
lm_4<-lm(mpg~wt, data=mtcars, subset=(mtcars$cyl==4)
)
lm_4<-lm(mpg~wt, data=mtcars, subset=(mtcars$cyl==4))
lm_8<-lm(mpg~wt, data=mtcars, subset=(mtcars$cyl==8))
lm_8-lm_4
lm_4
lm_8
coef(lm_8)-coef(lm_4)
summary.lm
summary.lm(lm_4)
summary.lm(lm_8)
mtcars
levels(mtcars$am)
mtcars$am
levels(mtcars$am)
mtcars$am<-factor(mtcars$am)
levels(mtcars$am)
levels(mtcars$cyl)
mtcars$cyl<-factor(mtcars$cyl)
levels(mtcars$cyl)
mtcars
d1<-ggplot(mtcars, aes(y=mpg, x=hp, group=cyl))
lm<-lm(mpg~wt+am, data=mtcars)
summary(lm)
lm<-lm(mpg~wt+am-1, data=mtcars)
summary(lm)
mtcars
lm<-lm(mpg~., data=mtcars)
plot(lm)
lm
summary(lm)
lm<-lm(mpg~wt+am, data=mtcars)
plot(lm)
lm
summary(lm)
lm<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(lm)
plot(lm)
summary(lm)
lm(mpg~., mtcars)
all<-lm(mpg~., mtcars)
summary(all)
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel) # results hidden
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
lm<-lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data=mtcars)
summary(lm)
stepModel <- step(fullModel, k=log(nrow(mtcars))
)
summary(stepMOdel)
summary(stepModel)
lm<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(lm)
require(MASS)
install.packages('MASS')
install.packages('MASS')
install.packages('MASS')
install.packages("MASS")
require(MASS)
require(mass)
require(MASS)
library(MASS)
?shuttle
shuttle
ыргееду
shuttle
require(MASS)
shuttle
head(use)
head(shuttle)
glm<-glm(use~wind,shuttle,'binomial')
glm<-glm(use~wind,shuttle,family='binomial')
glm
head(shuttle)
e
exp
exp(-0.31)
shuttle$useNum[shuttle$use == 'auto'] <- 1
shuttle$useNum[shuttle$use == 'noauto'] <- 0
glm<-glm(useNum~factor(wind),shuttle,family='binomial')
glm
summary(glm)
glm<-glm(useNum~factor(wind)-1,shuttle,family='binomial')
summary(glm)
summary(glm)coef
summary(glm)$coef
unname(exp(coef(glm))[1]/exp(coef(glm))[2])
glm<-glm(useNum~factor(wind)-1+magn,shuttle,family='binomial')
unname(exp(coef(glm))[1]/exp(coef(glm))[2])
glm<-glm(count~factor(Spray),InsectSprays,family='poisson')
head(InsectSprays)
glm<-glm(count~factor(spray),InsectSprays,family='poisson')
summary(glm)
glm<-glm(count~factor(spray)-1,InsectSprays,family='poisson')
summary(glm)
2.67/2.73
2.674/2.73
exp(coef(glm))
exp(coef(glm))[1]/exp(coef(glm))[2]
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
Also, we can clearly observe and statistically confirmed that mean and confidence interval of group with automatic transmission is lower in MPG that these of the group with manual transmission if other factors are neglected. So we can conclude that cars with manual transmittion tend to be better for MPG.
install.packages('caret')
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease)
head(adData)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
predictors
head(predictors)
head(diagnosis)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
summary(training)
summary(testing)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
summary(testing)
summary(training)
head(training)
head(testing)
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(testing)
dim(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$SuperPlasticizer)
plot(mixtures$SuperPlasticizer)
mixtures$SuperPlasticizer
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
training$SuperPlasticizer
training
head(training)
hist(training$Superplasticizer)
sp<-training$Superplasticizer
sp_s<log(sp)
sp_s<-log(sp)
hist(sp_s)
hist(sp)
hist(sp_s)
sp_s1<-log(sp+1)
hist(sp_s1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
p <- prcomp(training[,grep('^IL',names(training))])
head(p)
head(p)
head(p, n=1)
p <- training[,grep('^IL',names(training))]
head(p)
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.9)
head(preProc)
summary(preProc)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
p <- cbind(training$diagnisis,training[,grep('^IL',names(training))])
p <- cbind(training$diagnosis,training[,grep('^IL',names(training))])
head(p)
p1 <- preProcess(p,method="pca",thres=.8)
p1 <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.8)
p1 <- cbind(training$diagnosis,p1)
p
head(p)
p1 <- preProcess(p,method="pca",thres=.8)
p1 <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.8)
p1
PCFit <- train(p$training.diagnosis~.,data=p,method="glm")
p
head(p)
PCFit <- train(p$training$diagnosis~.,data=p,method="glm")
PCFit <- train(p[,1]~.,data=p,method="glm")
install_packages('e1071')
installpackages('e1071')
install.packages('e1071')
PCFit <- train(p[,1]~.,data=p,method="glm")
PCFit
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
install.packages('AppliedPredictiveModeling')
install.packages('ElemStatLearn')
install.packages('caret')
install.packages('pgmm')
install.packages('rpart')
head(segmentationOriginal)
head(case)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
data<-segmentationOriginal
##inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
inTrain<-data$Case=='Train'
training <- data[intrain,]
testing <- data[-inTrain,]
dim(training); dim(testing)
head(data$Case)
head(inTrain)
set.seed(125)
colnames(data)
head(data)
modFit <- train(Class ~ .,method="rpart",data=training)
head(training)
data<-segmentationOriginal
##inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
inTrain<-data$Case=='Train'
training <- data[intrain,]
testing <- data[-inTrain,]
dim(training); dim(testing)
data<-segmentationOriginal
##inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
inTrain<-data$Case=='Train'
training <- data[inTrain,]
testing <- data[-inTrain,]
dim(training); dim(testing)
head(training)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages('rattle')
library(rattle)
setwd("~/dsc/Data Science (R)/8. Practical Machine Learning")
set.seed('123')
url<-"https://d396qusza40orc.cloudfront.net/predmachlearn/"
trainFile<-"pml-training.csv"
testFile<-"pml-testing.csv"
if(!file.exists(trainFile)) download.file(paste0(url,trainFile), destfile = trainFile, method = "curl")
if(!file.exists(testFile)) download.file(paste0(url,testFile), destfile = testFile, method = "curl")
train <- read.csv(trainFile)
test20 <- read.csv(testFile)
test20<-test20[, (colSums(is.na(train) | train=='') < nrow(train) * 0.95)]
train<-train[, (colSums(is.na(train) | train=='') < nrow(train) * 0.95)]
require(caret)
inTrain <- createDataPartition(y=train$classe, p=0.7, list=FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
rm(train)
dim(training); dim(testing)
train.feat<-training[,-c(1:6,60)]
library(ggplot2)
library(grid)
library(gridExtra)
q1<-qplot(train.feat[,1], train.feat[,2], colour=training$classe)
q2<-qplot(train.feat[,3], train.feat[,4], colour=training$classe)
grid.arrange(q1, q2)
inSmall <- createDataPartition(y=training$classe, p=0.1, list=FALSE)
small <- training[inSmall,]
small.feat <-train.feat[inSmall,]
pretest <- training[-inSmall,]
pretest.feat <-train.feat[-inSmall,]
setwd("~/")
setwd("~/dsc/Data Science (R)/4.Exploratory Data Analysis/ExData_PeerAssessment2")
setwd("~/dsc/Data Science (R)/5. Reproducible Research/RepData_PeerAssessment1")
setwd("~/dsc/Data Science (R)/6. Statistical Inference/StatInfProject1")
